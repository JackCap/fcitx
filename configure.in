#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_INIT
AC_CONFIG_SRCDIR([src/core/main.c])
AM_INIT_AUTOMAKE(fcitx, "4.0.0")

dnl Find out what type of system we are
AC_CANONICAL_HOST
AC_CONFIG_HEADERS(config.h)

# Checks for programs.
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_MAKE_SET
AC_PROG_RANLIB
AC_PROG_LIBTOOL

# Checks for libraries.
AM_ICONV

# Checks for header files.
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS([limits.h malloc.h malloc/malloc.h stdlib.h string.h sys/param.h unistd.h wait.h sys/wait.h machine/endian.h pthread.h])

AC_MSG_CHECKING([host platform characteristics])

case "$host" in
    *-*-*freebsd*)
    HOST_LIBS="-lexecinfo -pthread"
    md5prog=gmd5sum
    ;;
    *-*-linux*)
    HOST_LIBS="-ldl -lpthread"
    md5prog=md5sum
    ;;
esac

AC_SUBST(HOST_LIBS)

AC_PATH_PROGS(WGET, wget, no)
if test "x$WGET" = "xno";
then
    AC_MSG_ERROR([You need to install wget])
fi

AC_PATH_PROGS(TAR, tar, no)
if test "x$TAR" = "xno";
then
    AC_MSG_ERROR([You need to install tar])
fi

AC_PATH_PROGS(MD5SUM, $md5prog, no)
if test "x$MD5SUM" = "xno";
then
    AC_MSG_ERROR([You need to install md5sum])
fi
AC_SUBST(WGET)
AC_SUBST(TAR)
AC_SUBST(MD5SUM)

# x11
AC_PATH_X
test -n "$x_libraries" && X_LIBS="-L$x_libraries"
test -n "$x_includes" && X_CFLAGS="-I$x_includes"
AC_SUBST(X_LIBS)
AC_SUBST(X_CFLAGS)

PKG_CHECK_MODULES(XRENDER, xrender, have_xrender=true, :)
if test "x$have_xrender" = "xtrue"; then
    AC_SUBST(XRENDER_LIBS)
    AC_SUBST(XRENDER_CFLAGS)
    :
else
    AC_MSG_ERROR([No XRender Lib found!])
    :
fi

PKG_CHECK_MODULES(CAIRO_XLIB, cairo-xlib, have_cairo_xlib=true, :)
if test "x$have_cairo_xlib" = "xtrue"; then
    AC_SUBST(CAIRO_XLIB_LIBS)
    AC_SUBST(CAIRO_XLIB_CFLAGS)
    :
else
    AC_MSG_ERROR([No cairo-xlib found!])
    :
fi

# Option to enable the DBus interface for kimpanel support.
AC_ARG_ENABLE(pango,
[  --enable-pango           Enable Pango For Better font support],
[case "${enableval}" in
  yes)  enable_pango=yes ;;
  no)   enable_pango=no ;;
  auto) enable_pango=auto ;;
  *) AC_MSG_ERROR([bad value "${enableval}" for --enable-dbus, use "yes" or "no" or "auto"(default).]) ;;
esac],[])

if test "x$enable_pango" = "xno"; then
  # --enable-pango=no
  :
else
    PKG_CHECK_MODULES(PANGOCAIRO, pangocairo, have_pangocairo=true, :)
    if test "x$have_pangocairo" = "xtrue"; then
        AC_SUBST(PANGOCAIRO_LIBS)
        AC_SUBST(PANGOCAIRO_CFLAGS)
        :
    else
        AC_MSG_ERROR([No PANGOCAIRO found!])
        :
    fi
    
    if test "x$have_pangocairo" = "xtrue"; then
        AC_SUBST(PANGOCAIRO_LIBS)
        AC_SUBST(DBUS_CFLAGS)
        :
    else
        if test "x$enable_pango" = "xyes"; then
            # Must use dbus, raise a error.
            AC_MSG_ERROR([No PANGOCAIRO found, configure for pango failed!])
        else
            AC_MSG_WARN([No PANGOCAIR found, skipping configure for pango])
        fi
  fi
fi
AM_CONDITIONAL(HAVE_PANGOCAIRO, $have_pangocairo)

if test "x$have_pangocairo" = "xtrue"; then
  AC_DEFINE(_ENABLE_PANGO,,[Enable Pango])
fi

PKG_CHECK_MODULES(FONTCONFIG, fontconfig, have_fontconfig=true, :)
if test "x$have_fontconfig" = "xtrue"; then
    AC_SUBST(FONTCONFIG_LIBS)
    AC_SUBST(FONTCONFIG_CFLAGS)
    :
else
    AC_MSG_ERROR([No fontconfig lib found!])
    :
fi

# Option to enable the DEBUG
AC_ARG_ENABLE(debug,
[  --enable-debug          Enable DEBUG],
[case "${enableval}" in
  yes)  enable_debug=yes ;;
  no)   enable_debug=no ;;
  *) AC_MSG_ERROR([bad value "${enableval}" for --enable-debug, use "yes" or "no" (default).]) ;;
esac],[])

if test "x$enable_debug" = "xyes"; then
  AC_DEFINE(_DEBUG,,[Enable Debug])
  CFLAGS="$CFLAGS -g"
fi

# Option to enable the TRAY
AC_ARG_ENABLE(tray,
[  --enable-tray           Enable tray icon],
[case "${enableval}" in
  yes)  enable_tray=yes ;;
  no)   enable_tray=no ;;
  *) AC_MSG_ERROR([bad value "${enableval}" for --enable-tray, use "yes" (default) or "no".]) ;;
esac],[])

if test "x$enable_tray" != "xno"; then
  AC_DEFINE(_ENABLE_TRAY,,[Enable Tray Icon])
fi

# Option to enable the recording
AC_ARG_ENABLE(recording,
[  --enable-recording      Enable recording of user input],
[case "${enableval}" in
  yes)  enable_recording=yes ;;
  no)   enable_recording=no ;;
  *) AC_MSG_ERROR([bad value "${enableval}" for --enable-recording, use "yes" or "no" (default).]) ;;
esac],[])

if test "x$enable_recording" = "xyes"; then
  AC_DEFINE(_ENABLE_RECORDING,,[Enable Recording])
fi

# Option to enable the DBus interface for kimpanel support.
AC_ARG_ENABLE(dbus,
[  --enable-dbus           Enable Dbus for kimpanel support],
[case "${enableval}" in
  yes)  enable_dbus=yes ;;
  no)   enable_dbus=no ;;
  auto) enable_dbus=auto ;;
  *) AC_MSG_ERROR([bad value "${enableval}" for --enable-dbus, use "yes" or "no" or "auto"(default).]) ;;
esac],[])

if test "x$enable_dbus" = "xno"; then
  # --enable-dbus=no
  :
else
  # Checks for Dbus
  PKG_CHECK_MODULES(DBUS, dbus-1 >= 0.2, have_dbus=true, :)

  if test "x$have_dbus" = "xtrue"; then
    AC_SUBST(DBUS_LIBS)
    AC_SUBST(DBUS_CFLAGS)
    :
  else
    if test "x$enable_dbus" = "xyes"; then
      # Must use dbus, raise a error.
      AC_MSG_ERROR([No dbus found, configure for Dbus failed!])
    else
      AC_MSG_WARN([No dbus found, skipping configure for Dbus])
    fi
  fi
fi
AM_CONDITIONAL(HAVE_DBUS, $have_dbus)

if test "x$have_dbus" = "xtrue"; then
  AC_DEFINE(_ENABLE_DBUS,,[Enable DBus])
fi

CFLAGS="$CFLAGS -Wall"

# Checks for typedefs, structures, and compiler characteristics.
AC_TYPE_PID_T
AC_TYPE_SIZE_T

# Checks for library functions.
AC_FUNC_FORK
AC_FUNC_MALLOC
AC_TYPE_SIGNAL
AC_CHECK_FUNCS([memmove memset mkdir setlocale strcasecmp strstr strtol asprintf vasprintf])

ALL_LINGUAS="zh_CN"
GETTEXT_PACKAGE=fcitx
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE,"$GETTEXT_PACKAGE", [Gettext package])
AC_PROG_INTLTOOL([0.35.0])
AM_GNU_GETTEXT([external])

AC_SUBST(INCINTL)

#dirty workaround for old intltool autoconf and automake
if test "x$DATADIRNAME" = "x"; then
    DATADIRNAME=share
    AC_SUBST(DATADIRNAME)
fi

AC_CONFIG_FILES([
           Makefile
           fcitx.spec
           doc/Makefile
           data/Makefile
           data/table/Makefile
           skin/Makefile
           skin/default/Makefile
           skin/dark/Makefile
           skin/classic/Makefile
           png/Makefile
           lib/Makefile
           src/Makefile
           src/core/Makefile
           src/im/Makefile
           src/im/pinyin/Makefile
           src/im/qw/Makefile
           src/im/special/Makefile
           src/im/extra/Makefile
           src/im/table/Makefile
           src/interface/Makefile
           src/ui/Makefile
           src/tools/Makefile
           src/fcitx-config/Makefile
           src/fcitx-config/fcitx-config.pc
           src/core/fcitx.pc
           tools/Makefile
           test/Makefile
           po/Makefile.in
])
AC_OUTPUT
