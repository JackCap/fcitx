--- a/src/lib/fcitx/ui.c
+++ b/src/lib/fcitx/ui.c
@@ -507,15 +507,15 @@
     SetMessageCount(msgDown, 0);
 
     for (i = 0; i < GetMessageCount(input->msgAuxUp) ; i ++) {
-        AddMessageAtLast(msgUp, GetMessageType(input->msgAuxUp, i), GetMessageString(input->msgAuxUp, i));
+        AddMessageAtLast(msgUp, GetMessageType(input->msgAuxUp, i), "%s", GetMessageString(input->msgAuxUp, i));
         extraLength += strlen(GetMessageString(input->msgAuxUp, i));
     }
 
     for (i = 0; i < GetMessageCount(input->msgPreedit) ; i ++)
-        AddMessageAtLast(msgUp, GetMessageType(input->msgPreedit, i), GetMessageString(input->msgPreedit, i));
+        AddMessageAtLast(msgUp, GetMessageType(input->msgPreedit, i), "%s", GetMessageString(input->msgPreedit, i));
 
     for (i = 0; i < GetMessageCount(input->msgAuxDown) ; i ++)
-        AddMessageAtLast(msgDown, GetMessageType(input->msgAuxDown, i), GetMessageString(input->msgAuxDown, i));
+        AddMessageAtLast(msgDown, GetMessageType(input->msgAuxDown, i), "%s", GetMessageString(input->msgAuxDown, i));
 
     CandidateWord* candWord = NULL;
 
@@ -528,17 +528,17 @@
         if (instance->config->bPointAfterNumber)
             strTemp[1] = '.';
 
-        AddMessageAtLast(msgDown, MSG_INDEX, strTemp);
+        AddMessageAtLast(msgDown, MSG_INDEX, "%s", strTemp);
 
         MSG_TYPE type = MSG_OTHER;
 
         if (i == 0 && CandidateWordGetCurrentPage(input->candList) == 0)
             type = MSG_FIRSTCAND;
 
-        AddMessageAtLast(msgDown, type, candWord->strWord);
+        AddMessageAtLast(msgDown, type, "%s", candWord->strWord);
 
         if (candWord->strExtra && strlen(candWord->strExtra) != 0)
-            AddMessageAtLast(msgDown, MSG_CODE, candWord->strExtra);
+            AddMessageAtLast(msgDown, MSG_CODE, "%s", candWord->strExtra);
 
         AddMessageAtLast(msgDown, MSG_OTHER, " ");
     }
--- a/src/module/quickphrase/QuickPhrase.c
+++ b/src/module/quickphrase/QuickPhrase.c
@@ -210,8 +210,8 @@
     FcitxInputState *input = FcitxInstanceGetInputState(qpstate->owner);
     FcitxInputStateSetCursorPos(input, strlen(FcitxInputStateGetRawInputBuffer(input)));
     CleanInputWindowUp(qpstate->owner);
-    AddMessageAtLast(FcitxInputStateGetAuxUp(input), MSG_TIPS, _("Quick Phrase: "));
-    AddMessageAtLast(FcitxInputStateGetPreedit(input), MSG_INPUT, FcitxInputStateGetRawInputBuffer(input));
+    AddMessageAtLast(FcitxInputStateGetAuxUp(input), MSG_TIPS, "%s", _("Quick Phrase: "));
+    AddMessageAtLast(FcitxInputStateGetPreedit(input), MSG_INPUT, "%s", FcitxInputStateGetRawInputBuffer(input));
 }
 
 boolean QuickPhrasePreFilter(void* arg, FcitxKeySym sym,
@@ -240,7 +240,7 @@
                     *retval = QuickPhraseGetCandWords(qpstate);
                     if (*retval == IRV_DISPLAY_MESSAGE) {
                         SetMessageCount(FcitxInputStateGetAuxDown(input), 0);
-                        AddMessageAtLast(FcitxInputStateGetAuxDown(input), MSG_TIPS, _("Press Enter to input text"));
+                        AddMessageAtLast(FcitxInputStateGetAuxDown(input), MSG_TIPS, "%s", _("Press Enter to input text"));
                     }
                 }
             } else
@@ -291,9 +291,9 @@
             && IsHotKey(sym, state, FCITX_SEMICOLON)) {
         CleanInputWindow(qpstate->owner);
         FcitxInputStateSetShowCursor(input, true);
-        AddMessageAtLast(FcitxInputStateGetAuxUp(input), MSG_TIPS, _("Quick Phrase: "));
+        AddMessageAtLast(FcitxInputStateGetAuxUp(input), MSG_TIPS, "%s", _("Quick Phrase: "));
         FcitxInputStateSetCursorPos(input, 0);
-        AddMessageAtLast(FcitxInputStateGetAuxDown(input), MSG_TIPS, _("Spcae for ； Enter for;"));
+        AddMessageAtLast(FcitxInputStateGetAuxDown(input), MSG_TIPS, "%s",_("Spcae for ； Enter for;"));
 
         qpstate->enabled = true;
         *retval = IRV_DISPLAY_MESSAGE;
--- a/src/module/autoeng/AutoEng.c
+++ b/src/module/autoeng/AutoEng.c
@@ -273,7 +273,7 @@
     if (autoEngState->buf[0] == '\0')
         return;
 
-    AddMessageAtLast(FcitxInputStateGetPreedit(input), MSG_INPUT, autoEngState->buf);
+    AddMessageAtLast(FcitxInputStateGetPreedit(input), MSG_INPUT, "%s", autoEngState->buf);
     strcpy(FcitxInputStateGetRawInputBuffer(input), autoEngState->buf);
     FcitxInputStateSetRawInputBufferSize(input, strlen(autoEngState->buf));
     FcitxInputStateSetCursorPos(input, FcitxInputStateGetRawInputBufferSize(input));
